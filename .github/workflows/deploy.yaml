# .github/workflows/release.yml

name: Release Build and Upload

on:
  release:
    types: [created] # GitHub上でReleaseが作成されたときにトリガー

jobs:
  # --- ビルドジョブ ---
  build:
    name: Build (${{ matrix.target }})
    # OSをマトリックスから動的に選択
    runs-on: ${{ matrix.os == 'windows' && 'windows-latest' || matrix.os == 'macos' && 'macos-latest' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86_64 (MSVC)
          - target: x86_64-pc-windows-msvc
            os: windows
          # Linux x86_64 (MUSL for static linking)
          - target: x86_64-unknown-linux-musl
            os: linux
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos
          # macOS aarch64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos
          # Android aarch64 (Termux)
          - target: aarch64-linux-android
            os: linux # ビルドはLinuxランナーで行う
            ndk_api_level: 24 # 使用するNDK APIレベル (Termux推奨に合わせて調整)
          # Raspberry Pi aarch64 (MUSL variant)
          - target: aarch64-unknown-linux-musl
            os: linux
          # Raspberry Pi aarch64 (GNU variant)
          - target: aarch64-unknown-linux-gnu
            os: linux

    steps:
      # 1. リポジトリのコードをチェックアウト
      - uses: actions/checkout@v4

      # 2. Rustツールチェインを設定 (指定されたターゲットもインストール)
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          # components: rust-src rustc-dev llvm-tools-preview # 必要に応じてコメント解除

      # 3. Linux (musl) ビルドに必要なツールをインストール
      - name: Install musl-tools for Linux MUSL target
        if: matrix.os == 'linux' && contains(matrix.target, '-musl')
        run: |
          sudo apt-get install -y musl-tools

      # 4. Android NDKをセットアップ (aarch64-linux-android ターゲットの場合)
      - name: Setup Android NDK for aarch64-linux-android target
        if: matrix.target == 'aarch64-linux-android'
        uses: nttld/setup-ndk@v1 # NDKセットアップアクション (nttld/setup-ndk または nongli/setup-ndk)
        id: setup-ndk # ステップにIDを付与してNDKパスを参照できるようにする
        with:
          ndk-version: r26d # 最新の安定版など、適切なNDKバージョンを指定
          # link-to-sdk: true # SDKとリンクする必要があればtrueにする (通常不要)

      # 5. Androidビルド用のリンカーとコンパイラを設定 (aarch64-linux-android ターゲットの場合)
      #    NDK r23c 以降は ${target}${api_level}-clang という形式が一般的
      #    $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/ で確認可能
      - name: Set Android linker and compiler for aarch64-linux-android target
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ matrix.ndk_api_level }}-clang" >> $GITHUB_ENV
          echo "CC_aarch64_linux_android=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{ matrix.ndk_api_level }}-clang" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV

      # 5.1 Install AArch64 cross-compiler and set ENV VARS (GNU/MUSL)
      - name: Install AArch64 cross-compiler and set ENV VARS (GNU/MUSL)
        if: matrix.os == 'linux' && startsWith(matrix.target, 'aarch64-unknown-linux-')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          # Set ENV VARS for cargo/cc crate to find the cross-compiler
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV # Use gnu gcc for musl target as well
          echo "AR_aarch64_unknown_linux_musl=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          # Set ENV VARS for rustc to find the correct linker
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # 6. プロジェクトをビルド (リリースモード、指定ターゲット向け)
      - name: Build binaries
        run: |
          cargo build --verbose --release --target ${{ matrix.target }} --bin agent
          cargo build --verbose --release --target ${{ matrix.target }} --bin cserver

      # 7. ビルドされた成果物をアップロード
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }} # アーティファクト名をターゲット名にする
          path: |
            target/${{ matrix.target }}/release/agent${{ matrix.os == 'windows' && '.exe' || '' }}
            target/${{ matrix.target }}/release/cserver${{ matrix.os == 'windows' && '.exe' || '' }}
          if-no-files-found: error
          overwrite: true

  # --- リリース作成ジョブ ---
  create_release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write # リリース作成・編集権限

    steps:
      # 1. 全てのビルドアーティファクトをダウンロード
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2. 成果物の名前を変更して配布形式にする
      - name: Rename artifacts for release
        run: |
          pwd
          cd artifacts
          echo "Current directory: $(pwd)"
          echo "Downloaded artifacts structure:"
          ls -R .
          echo "---"
          for target_dir in *; do
            if [ -d "$target_dir" ]; then
              echo "Processing target directory: $target_dir"
              for original_file in "$target_dir"/*; do
                if [ -f "$original_file" ]; then
                  filename=$(basename "$original_file")
                  project_name=""
                  extension=""
                  if [[ "$filename" == agent* ]]; then
                      project_name="agent"
                  elif [[ "$filename" == cserver* ]]; then
                      project_name="cserver"
                  else
                      echo "Warning: Skipping unknown file '$filename' in '$target_dir'"
                      continue
                  fi

                  # Windowsターゲットの場合のみ拡張子.exeを付ける
                  if [[ "$target_dir" == *windows* && "$filename" == *.exe ]]; then
                    extension=".exe"
                  fi

                  # 新しいファイル名 (例: garadama-v1.0.0-aarch64-linux-android)
                  new_file_name="${project_name}-${{ github.ref_name }}-${target_dir}${extension}"

                  echo "Renaming '$original_file' to '$new_file_name'"
                  # ファイルを artifacts ディレクトリ直下に移動してリネーム
                  mv "$original_file" "$new_file_name"
                fi
              done
              # 空になったターゲットディレクトリを削除
              rmdir "$target_dir"
            fi
          done
          cd ..
          echo "---"
          echo "Renamed artifacts in artifacts directory:"
          ls -l artifacts # artifacts ディレクトリの内容を表示

      # 3. GitHub Releaseを作成し、成果物をアップロード
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }} # リリース名としてタグ名を使用
          files: artifacts/* # artifacts ディレクトリ内の全ファイルをアップロード
          generate_release_notes: true # リリースノートを自動生成
